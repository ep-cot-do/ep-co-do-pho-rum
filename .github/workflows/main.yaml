name: Build and Deploy Forum

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      GIT_REGISTRY: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert REGISTRY to lowercase
        run: echo "REGISTRY=$(echo $GIT_REGISTRY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Clean up untagged images
      - name: Clean up old images
        run: |
          # Get package name
          PACKAGE_NAME="fcoder-forum"

          # Authenticate with GitHub API
          echo "Authenticating with GitHub API..."
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          OWNER="${{ github.repository_owner }}"
          PACKAGE_TYPE="container"

          # Get list of package versions
          echo "Getting list of package versions..."
          VERSIONS_URL="https://api.github.com/users/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions"
          VERSIONS=$(curl -s -H "Authorization: token ${TOKEN}" "${VERSIONS_URL}")

          # Delete untagged versions (keep the latest 5)
          echo "Finding and deleting old untagged images..."
          echo "$VERSIONS" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' | tail -n +6 | while read -r VERSION_ID; do
            echo "Deleting version ${VERSION_ID}..."
            curl -s -X DELETE -H "Authorization: token ${TOKEN}" "https://api.github.com/users/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions/${VERSION_ID}"
          done

          echo "Image cleanup completed."

      - name: Build and push Docker image
        run: |
          # Clean local Docker cache
          docker system prune -af

          # Build and push new image
          docker compose -f .docker/compose.build.yaml --profile build build --parallel --no-cache
          docker compose -f .docker/compose.build.yaml --profile build push
