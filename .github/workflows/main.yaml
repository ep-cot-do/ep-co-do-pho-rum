name: Build and Deploy Forum

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      GIT_REGISTRY: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert REGISTRY to lowercase
        run: echo "REGISTRY=$(echo $GIT_REGISTRY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Clean up untagged images
      - name: Clean up old images
        run: |
          # Get package name
          PACKAGE_NAME="fcoder-forum"

          # Authenticate with GitHub API
          echo "Authenticating with GitHub API..."
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          OWNER="${{ github.repository_owner }}"
          PACKAGE_TYPE="container"

          # Get list of package versions
          echo "Getting list of package versions..."
          VERSIONS_URL="https://api.github.com/users/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions"
          VERSIONS=$(curl -s -H "Authorization: token ${TOKEN}" "${VERSIONS_URL}")

          # Delete untagged versions (keep the latest 5)
          echo "Finding and deleting old untagged images..."
          echo "$VERSIONS" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id' | tail -n +6 | while read -r VERSION_ID; do
            echo "Deleting version ${VERSION_ID}..."
            curl -s -X DELETE -H "Authorization: token ${TOKEN}" "https://api.github.com/users/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}/versions/${VERSION_ID}"
          done

          echo "Image cleanup completed."

      - name: Build and push Docker image
        run: |
          # Clean local Docker cache
          docker system prune -af

          # Export ROOT_DOMAIN for the build
          export ROOT_DOMAIN=${{ secrets.ROOT_DOMAIN }}
          echo "Using ROOT_DOMAIN=${ROOT_DOMAIN} for build"

          # Build and push new image
          docker compose -f .docker/compose.build.yaml --profile build build --parallel --no-cache
          docker compose -f .docker/compose.build.yaml --profile build push

  deploy-website:
    runs-on: ubuntu-latest
    needs: build-image
    env:
      GIT_REGISTRY: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Convert REGISTRY to lowercase
        run: echo "REGISTRY=$(echo $GIT_REGISTRY | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Create GitHub Token File
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" > github_token.txt

      - name: Copy GitHub Token to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "github_token.txt"
          target: "~/forum-deployment"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Prepare directory
            mkdir -p ~/forum-deployment/.docker

            # Pull the latest code
            cd ~/forum-deployment
            echo "${{ env.REGISTRY }}" > .registry

            # Store GitHub credentials properly
            GITHUB_TOKEN=$(cat github_token.txt)

            # Create Docker config directory if it doesn't exist
            mkdir -p ~/.docker

            # Create proper Docker credential configuration
            echo "{\"auths\":{\"ghcr.io\":{\"auth\":\"$(echo -n "${{ github.actor }}:${GITHUB_TOKEN}" | base64)\"}}}" > ~/.docker/config.json

            # Secure the token file
            rm github_token.txt

            # Create/update environment file with additional backend variables
            cat > .env << EOF
            REGISTRY=${{ env.REGISTRY }}
            ROOT_DOMAIN=${{ secrets.ROOT_DOMAIN }}
            CF_API_TOKEN=${{ secrets.CF_API_TOKEN }}
            ZONE_ID=${{ secrets.ZONE_ID }}
            CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
            NEXT_PUBLIC_API_ENDPOINT=https://api.${{ secrets.ROOT_DOMAIN }}

            # Backend database configuration
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
            PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

            # Application secrets
            ACCESS_TOKEN_KEY=${{ secrets.ACCESS_TOKEN_KEY }}
            REFRESH_TOKEN_KEY=${{ secrets.REFRESH_TOKEN_KEY }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            EOF

            # Also copy environment file to .docker directory for convenience
            cp .env .docker/.env

            # Copy the docker-compose file content with backend services
            cat > .docker/compose.yaml << 'EOF'
            services:
              fcoder-cloudflare-tunnel:
                container_name: fcoder-cloudflare-tunnel
                image: cloudflare/cloudflared
                restart: unless-stopped
                command: tunnel run
                profiles:
                  - prod
                environment:
                  - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
                networks:
                  - fcoder-traefik-internal

              fcoder-traefik:
                container_name: fcoder-traefik
                image: traefik:v2.10
                restart: always
                command:
                  - "--log"
                  - "--entrypoints.web.address=:80"
                  - "--entrypoints.websecure.address=:443"
                  - "--api.dashboard=true"
                  - "--api.insecure=true"
                  - "--providers.docker=true"
                  - "--providers.docker.exposedbydefault=false"
                  - "--log.level=DEBUG"
                  - "--accesslog=true"
                  - "--serversTransport.insecureSkipVerify=true"
                ports:
                  - "80:80"
                  - "443:443"
                profiles:
                  - prod
                volumes:
                  - "/var/run/docker.sock:/var/run/docker.sock"
                environment:
                  - CF_DNS_API_TOKEN=${CF_API_TOKEN}
                networks:
                  - fcoder-networks
                  - fcoder-traefik-internal

              fcoder-cloudflare-companion:
                container_name: fcoder-cloudflare-companion
                image: ghcr.io/tiredofit/docker-traefik-cloudflare-companion:latest
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                environment:
                  - TIMEZONE=Asia/Ho_Chi_Minh
                  - LOG_TYPE=CONSOLE
                  - LOG_LEVEL=INFO
                  - TRAEFIK_VERSION=2
                  - RC_TYPE=CNAME
                  - TARGET_DOMAIN=${ROOT_DOMAIN}
                  - REFRESH_ENTRIES=TRUE
                  - ENABLE_TRAEFIK_POLL=TRUE
                  - TRAEFIK_POLL_URL=http://fcoder-traefik/api
                  - TRAEFIK_FILTER_LABEL=traefik.constraint
                  - TRAEFIK_FILTER=proxy-public
                  - CF_TOKEN=${CF_API_TOKEN}
                  - DOMAIN1=${ROOT_DOMAIN}
                  - DOMAIN1_ZONE_ID=${ZONE_ID}
                  - DOMAIN1_PROXIED=TRUE
                restart: always
                networks:
                  - fcoder-traefik-internal
                profiles:
                  - prod

              fcoder-forum-frontend:
                container_name: fcoder-forum-frontend
                image: "${REGISTRY}/fcoder-forum-frontend:latest"
                restart: always
                environment:
                  - NEXT_PUBLIC_API_ENDPOINT=https://api.${ROOT_DOMAIN}
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=fcoder-networks"
                  - "traefik.constraint=proxy-public"
                  - "traefik.http.routers.fcoder-forum-frontend.rule=Host(`${ROOT_DOMAIN}`)"
                  - "traefik.http.routers.fcoder-forum-frontend.entrypoints=web"
                  - "traefik.http.services.fcoder-forum-frontend.loadbalancer.server.port=3000"
                networks:
                  - fcoder-networks
                profiles:
                  - prod

              # Backend PostgreSQL Database
              fcoder-forum-postgres:
                container_name: fcoder-forum-postgres
                image: "postgres:16"
                environment:
                  POSTGRES_DB: ${DB_NAME}
                  POSTGRES_USER: ${DB_USERNAME}
                  POSTGRES_PASSWORD: ${DB_PASSWORD}
                volumes:
                  - postgres-data:/var/lib/postgresql/data
                restart: always
                networks:
                  - fcoder-networks
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 10s
                profiles:
                  - prod

              # Redis for caching
              fcoder-forum-redis:
                container_name: fcoder-forum-redis
                image: "redis:latest"
                command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
                restart: always
                volumes:
                  - redis-data:/data
                networks:
                  - fcoder-networks
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                profiles:
                  - prod

              # pgAdmin for PostgreSQL
              fcoder-forum-pgadmin:
                container_name: fcoder-forum-pgadmin
                image: "dpage/pgadmin4:latest"
                restart: always
                environment:
                  PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
                  PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
                  PGADMIN_CONFIG_SERVER_MODE: "True"
                  PGADMIN_LISTEN_PORT: 80
                volumes:
                  - pgadmin-data:/var/lib/pgadmin
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=fcoder-networks"
                  - "traefik.constraint=proxy-public"
                  - "traefik.http.routers.fcoder-forum-pgadmin.rule=Host(`db.${ROOT_DOMAIN}`)"
                  - "traefik.http.routers.fcoder-forum-pgadmin.entrypoints=web"
                  - "traefik.http.services.fcoder-forum-pgadmin.loadbalancer.server.port=80"
                networks:
                  - fcoder-networks
                depends_on:
                  - fcoder-forum-postgres
                profiles:
                  - prod

              # Spring Boot Application
              fcoder-forum-backend:
                container_name: fcoder-forum-backend
                image: "${REGISTRY}/fcoder-forum-backend:latest"
                restart: always
                ports:
                  - "8080:8080"
                depends_on:
                  - fcoder-forum-postgres
                  - fcoder-forum-redis
                environment:
                  DB_HOST: fcoder-forum-postgres
                  DB_PORT: 5432
                  DB_NAME: ${DB_NAME}
                  DB_USERNAME: ${DB_USERNAME}
                  DB_PASSWORD: ${DB_PASSWORD}
                  REDIS_HOST: fcoder-forum-redis
                  REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
                  SPRING_PROFILE: prod
                  ACCESS_TOKEN_KEY: ${ACCESS_TOKEN_KEY}
                  REFRESH_TOKEN_KEY: ${REFRESH_TOKEN_KEY}
                  MAIL_USERNAME: ${MAIL_USERNAME}
                  MAIL_PASSWORD: ${MAIL_PASSWORD}
                  SWAGGER_URL: "https://api.${ROOT_DOMAIN}"
                  PAYMENT_CALLBACK: "https://${ROOT_DOMAIN}/checkout"
                  FORGOT_PASSWORD_CALLBACK: "https://${ROOT_DOMAIN}/forgot-password"
                labels:
                  - "traefik.enable=true"
                  - "traefik.docker.network=fcoder-networks"
                  - "traefik.constraint=proxy-public"
                  - "traefik.http.routers.fcoder-forum-backend.rule=Host(`api.${ROOT_DOMAIN}`)"
                  - "traefik.http.routers.fcoder-forum-backend.entrypoints=web"
                  - "traefik.http.services.fcoder-forum-backend.loadbalancer.server.port=8080"
                networks:
                  - fcoder-networks
                profiles:
                  - prod

            networks:
              fcoder-networks:
                name: fcoder_networks
                driver: bridge
              fcoder-traefik-internal:
                name: fcoder_traefik_internal
                driver: bridge

            volumes:
              postgres-data:
                name: fcoder_postgres_data
              redis-data:
                name: fcoder_redis_data
              pgadmin-data:
                name: fcoder_pgadmin_data
            EOF

            # Login to GitHub Container Registry with proper method
            echo "${GITHUB_TOKEN}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Copy docker config to root user for sudo operations
            sudo mkdir -p /root/.docker
            sudo cp ~/.docker/config.json /root/.docker/config.json

            # Clean up existing containers and images
            echo "=== Cleaning up existing resources ==="
            sudo docker compose -f .docker/compose.yaml --env-file .env --profile prod down || true
            sudo docker system prune -af

            # Try to pull your images directly to verify they work
            echo "=== Testing Image Pull ==="
            sudo docker pull ${REGISTRY}/fcoder-forum-frontend:latest
            sudo docker pull ${REGISTRY}/fcoder-forum-backend:latest

            # Run docker compose with the explicit env-file flag
            echo "=== Starting Services ==="
            sudo docker compose -f .docker/compose.yaml --env-file .env --profile prod up -d

            # Check running containers
            echo "=== Running Containers ==="
            sudo docker ps

            # Display logs if there are issues
            if ! sudo docker ps | grep fcoder-forum-frontend; then
              echo "=== Forum frontend container failed to start - showing logs ==="
              sudo docker logs fcoder-forum-frontend || echo "No logs available"
            else
              echo "=== Forum frontend container successfully started ==="
            fi

            if ! sudo docker ps | grep fcoder-forum-backend; then
              echo "=== Forum backend container failed to start - showing logs ==="
              sudo docker logs fcoder-forum-backend || echo "No logs available"
            else
              echo "=== Forum backend container successfully started ==="
            fi
