# Multi-language compiler container for FCoder Online Judge
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Ho_Chi_Minh

# Install basic dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    unzip \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Install C/C++ compiler (GCC)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    gdb \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3 and pip
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && rm -rf /var/lib/apt/lists/*

# Install Java 21 (OpenJDK)
RUN apt-get update && apt-get install -y \
    openjdk-21-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64
ENV PATH=$PATH:$JAVA_HOME/bin

# Install Go
RUN wget https://go.dev/dl/go1.21.5.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz \
    && rm go1.21.5.linux-amd64.tar.gz

# Set Go environment
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/go
ENV GOBIN=/go/bin

# Install Node.js and npm for JavaScript
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Install .NET Core for C#
RUN wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \
    && dpkg -i packages-microsoft-prod.deb \
    && rm packages-microsoft-prod.deb \
    && apt-get update \
    && apt-get install -y dotnet-sdk-8.0 \
    && rm -rf /var/lib/apt/lists/*

# Create working directory for code execution
RUN mkdir -p /workspace/code-execution
WORKDIR /workspace

# Create a non-root user for security
RUN useradd -m -s /bin/bash coderunner \
    && chown -R coderunner:coderunner /workspace

# Switch to non-root user
USER coderunner

# Verify all compilers are installed
RUN echo "=== Compiler Versions ===" \
    && gcc --version \
    && g++ --version \
    && python --version \
    && java -version \
    && go version \
    && node --version \
    && npm --version \
    && dotnet --version

# Create test files to verify compilers work
RUN mkdir -p /workspace/tests

# Test C compiler
RUN echo '#include <stdio.h>\nint main() { printf("C compiler works!\\n"); return 0; }' > /workspace/tests/test.c \
    && gcc /workspace/tests/test.c -o /workspace/tests/test_c \
    && /workspace/tests/test_c

# Test C++ compiler
RUN echo '#include <iostream>\nint main() { std::cout << "C++ compiler works!" << std::endl; return 0; }' > /workspace/tests/test.cpp \
    && g++ /workspace/tests/test.cpp -o /workspace/tests/test_cpp \
    && /workspace/tests/test_cpp

# Test Python
RUN echo 'print("Python works!")' > /workspace/tests/test.py \
    && python /workspace/tests/test.py

# Test Java
RUN echo 'public class Test { public static void main(String[] args) { System.out.println("Java works!"); } }' > /workspace/tests/Test.java \
    && javac /workspace/tests/Test.java \
    && cd /workspace/tests && java Test

# Test Go
RUN echo 'package main\nimport "fmt"\nfunc main() { fmt.Println("Go works!") }' > /workspace/tests/test.go \
    && cd /workspace/tests && go run test.go

# Test Node.js
RUN echo 'console.log("Node.js works!");' > /workspace/tests/test.js \
    && node /workspace/tests/test.js

# Test C#
RUN echo 'using System;\nclass Program { static void Main() { Console.WriteLine("C# works!"); } }' > /workspace/tests/test.cs \
    && cd /workspace/tests && dotnet new console --name TestCSharp --force \
    && cp test.cs TestCSharp/Program.cs \
    && cd TestCSharp && dotnet run

# Clean up test files
RUN rm -rf /workspace/tests

# Set default command
CMD ["bash"]

# Expose ports if needed for future debugging/monitoring
EXPOSE 9000

# Health check to ensure container is ready
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD gcc --version && python --version && java -version && go version && node --version && dotnet --version || exit 1
